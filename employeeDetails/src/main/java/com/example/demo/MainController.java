package com.example.demo;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
/*import org.springframework.web.bind.annotation.RequestMapping;*/
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.demo.model.User;

@Controller // This means that this class is a Controller
//@RequestMapping(path="/employee_details") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  
  @CrossOrigin(origins = "*")
  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody Map<String, String> addNewUser (
		  @RequestParam String name,
		  @RequestParam String dob,
		  @RequestParam String guardianName,
		  @RequestParam String department,
		  @RequestParam String role,
		  @RequestParam String gender,
		  @RequestParam String maritalStatus,
		  @RequestParam String permanentAddress,
		  @RequestParam String currentLocatedAddress,
		  @RequestParam String contactNumber
		  ) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
	  

    User n = new User();
    n.setName(name);
    n.setDob(dob);
    n.setGuardianName(guardianName);
    n.setDepartment(department);
    n.setRole(role);
    n.setGender(gender);
    n.setMaritalStatus(maritalStatus);
    n.setPermanentAddress(permanentAddress);
    n.setCurrentLocatedAddress(currentLocatedAddress);
    n.setContactNumber(contactNumber);

    userRepository.save(n);
    
    
    HashMap<String, String> map = new HashMap<>();
    map.put("success","true");
    map.put("message", "Added Successfuly!");
    return map;   
  
    
    
  
  }
  

  @CrossOrigin(origins = "*")
  @PostMapping(path="/get_user")
  public @ResponseBody Optional<User> getUser(
		  @RequestParam String id
		  ) {
    // This returns a JSON or XML with the user
		  return userRepository.findById(Integer.parseInt(id))==null?null:userRepository.findById(Integer.parseInt(id));
	 
    
  }


  @CrossOrigin(origins = "*")
  @PostMapping(path="/delete_user")
  public @ResponseBody String  deleteUser(
		  @RequestParam int id
		  ) {
    // This returns a JSON or XML with the users
     userRepository.deleteById(id);
     
     return "{\r\n" + 
		"  \"success\": true,\r\n" + 
		"  \"message\": \r\n" + 
		"    Deletted Successfully\r\n" + 
		"  \r\n" + 
		"}";
  }


  @CrossOrigin(origins = "*")
  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
}
